@using System.Text.Json
@inject IJSRuntime JSRuntime

    <div class="console-header align-items-center">
        <h3 class="console-title">Console log</h3>
        <HtmlEditorButton Click=@OnClearClick Text="Clear console" ButtonStyle="ButtonStyle.Light" />
    </div>
    <div class="console-content" id="event-console">
    @foreach(var message in messages)
    {
        <div class="console-message">
            <span class="console-message-time">@message.Date.ToString("HH:mm:ss.ff")</span>
            <span class="console-message-text">@message.Text</span>
        </div>
    }
    </div>

@code {
    class Message
    {
        public DateTime Date { get; set; }
        public string Text { get; set; }
    }

    [Parameter(CaptureUnmatchedValues = true)]
    public IDictionary<string, object> Attributes { get; set; }
    IList<Message> messages = new List<Message>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            await JSRuntime.InvokeVoidAsync("eval", $"document.getElementById('event-console').scrollTop = document.getElementById('event-console').scrollHeight");
        }
    }

    void OnClearClick()
    {
        Clear();
    }

    public void Clear()
    {
        messages.Clear();

        InvokeAsync(StateHasChanged);
    }

    public void Log(string message)
    {
        messages.Add(new Message { Date = DateTime.Now, Text = message });

        InvokeAsync(StateHasChanged);
    }

    public void Log(object value)
    {
        Log(JsonSerializer.Serialize(value));
    }
}